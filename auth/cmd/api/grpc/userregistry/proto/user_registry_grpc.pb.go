// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: user_registry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserRegistryService_UserPrimaryStream_FullMethodName  = "/user_registry_service.UserRegistryService/UserPrimaryStream"
	UserRegistryService_UserOverflowStream_FullMethodName = "/user_registry_service.UserRegistryService/UserOverflowStream"
)

// UserRegistryServiceClient is the client API for UserRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegistryServiceClient interface {
	UserPrimaryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegistryRequest, RegistryResponse], error)
	UserOverflowStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegistryRequest, RegistryResponse], error)
}

type userRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegistryServiceClient(cc grpc.ClientConnInterface) UserRegistryServiceClient {
	return &userRegistryServiceClient{cc}
}

func (c *userRegistryServiceClient) UserPrimaryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegistryRequest, RegistryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserRegistryService_ServiceDesc.Streams[0], UserRegistryService_UserPrimaryStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegistryRequest, RegistryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserRegistryService_UserPrimaryStreamClient = grpc.BidiStreamingClient[RegistryRequest, RegistryResponse]

func (c *userRegistryServiceClient) UserOverflowStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegistryRequest, RegistryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserRegistryService_ServiceDesc.Streams[1], UserRegistryService_UserOverflowStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegistryRequest, RegistryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserRegistryService_UserOverflowStreamClient = grpc.BidiStreamingClient[RegistryRequest, RegistryResponse]

// UserRegistryServiceServer is the server API for UserRegistryService service.
// All implementations must embed UnimplementedUserRegistryServiceServer
// for forward compatibility.
type UserRegistryServiceServer interface {
	UserPrimaryStream(grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]) error
	UserOverflowStream(grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]) error
	mustEmbedUnimplementedUserRegistryServiceServer()
}

// UnimplementedUserRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserRegistryServiceServer struct{}

func (UnimplementedUserRegistryServiceServer) UserPrimaryStream(grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UserPrimaryStream not implemented")
}
func (UnimplementedUserRegistryServiceServer) UserOverflowStream(grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UserOverflowStream not implemented")
}
func (UnimplementedUserRegistryServiceServer) mustEmbedUnimplementedUserRegistryServiceServer() {}
func (UnimplementedUserRegistryServiceServer) testEmbeddedByValue()                             {}

// UnsafeUserRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegistryServiceServer will
// result in compilation errors.
type UnsafeUserRegistryServiceServer interface {
	mustEmbedUnimplementedUserRegistryServiceServer()
}

func RegisterUserRegistryServiceServer(s grpc.ServiceRegistrar, srv UserRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserRegistryService_ServiceDesc, srv)
}

func _UserRegistryService_UserPrimaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserRegistryServiceServer).UserPrimaryStream(&grpc.GenericServerStream[RegistryRequest, RegistryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserRegistryService_UserPrimaryStreamServer = grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]

func _UserRegistryService_UserOverflowStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserRegistryServiceServer).UserOverflowStream(&grpc.GenericServerStream[RegistryRequest, RegistryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserRegistryService_UserOverflowStreamServer = grpc.BidiStreamingServer[RegistryRequest, RegistryResponse]

// UserRegistryService_ServiceDesc is the grpc.ServiceDesc for UserRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_registry_service.UserRegistryService",
	HandlerType: (*UserRegistryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserPrimaryStream",
			Handler:       _UserRegistryService_UserPrimaryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UserOverflowStream",
			Handler:       _UserRegistryService_UserOverflowStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user_registry.proto",
}

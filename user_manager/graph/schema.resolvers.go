package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"user_manager/graph/model"
)

// MakeInvitation is the resolver for the makeInvitation field.
func (r *mutationResolver) MakeInvitation(ctx context.Context, input model.InvitationCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: MakeInvitation - makeInvitation"))
}

// MakeJoinRequest is the resolver for the makeJoinRequest field.
func (r *mutationResolver) MakeJoinRequest(ctx context.Context, input model.JoinRequestCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: MakeJoinRequest - makeJoinRequest"))
}

// MakeWorkspace is the resolver for the makeWorkspace field.
func (r *mutationResolver) MakeWorkspace(ctx context.Context, input model.WorkspaceCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: MakeWorkspace - makeWorkspace"))
}

// UserID is the resolver for the userID field.
func (r *queryResolver) UserID(ctx context.Context, entity string) (*model.UserEntity, error) {
	panic(fmt.Errorf("not implemented: UserID - userID"))
}

// UserByID is the resolver for the userByID field.
func (r *queryResolver) UserByID(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userByID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

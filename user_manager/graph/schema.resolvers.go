package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"user_manager/graph/model"
)

// ChangeName is the resolver for the changeName field.
func (r *mutationResolver) ChangeName(ctx context.Context, input model.ChangeNameCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: ChangeName - changeName"))
}

// AddBio is the resolver for the addBio field.
func (r *mutationResolver) AddBio(ctx context.Context, input model.BioCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: AddBio - addBio"))
}

// CreateWorkspace is the resolver for the createWorkspace field.
func (r *mutationResolver) CreateWorkspace(ctx context.Context, input model.WorkspaceCredentials) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: CreateWorkspace - createWorkspace"))
}

// SendInvitation is the resolver for the sendInvitation field.
func (r *mutationResolver) SendInvitation(ctx context.Context, input model.InvitationCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: SendInvitation - sendInvitation"))
}

// SendJoinRequest is the resolver for the sendJoinRequest field.
func (r *mutationResolver) SendJoinRequest(ctx context.Context, input model.JoinRequestCredentials) (string, error) {
	panic(fmt.Errorf("not implemented: SendJoinRequest - sendJoinRequest"))
}

// CreateExperience is the resolver for the createExperience field.
func (r *mutationResolver) CreateExperience(ctx context.Context, input model.NewExperienceCredentials) (*model.Experience, error) {
	panic(fmt.Errorf("not implemented: CreateExperience - createExperience"))
}

// AddExperience is the resolver for the addExperience field.
func (r *mutationResolver) AddExperience(ctx context.Context, input model.ExperienceCredentials) (*model.Experience, error) {
	panic(fmt.Errorf("not implemented: AddExperience - addExperience"))
}

// BatchNewExperiences is the resolver for the batchNewExperiences field.
func (r *mutationResolver) BatchNewExperiences(ctx context.Context, input model.ExperienceBatchCredentials) ([]*model.Experience, error) {
	panic(fmt.Errorf("not implemented: BatchNewExperiences - batchNewExperiences"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*model.User, error) {
	return r.Database.GetUserFromDB(userID)
}

// GetInvitationInfos is the resolver for the getInvitationInfos field.
func (r *queryResolver) GetInvitationInfos(ctx context.Context, userID string) ([]*model.InvitationInfo, error) {
	panic(fmt.Errorf("not implemented: GetInvitationInfos - getInvitationInfos"))
}

// GetJoinRequestInfos is the resolver for the getJoinRequestInfos field.
func (r *queryResolver) GetJoinRequestInfos(ctx context.Context, workspaceID string) ([]*model.JoinRequestInfo, error) {
	panic(fmt.Errorf("not implemented: GetJoinRequestInfos - getJoinRequestInfos"))
}

// LookupWorkspace is the resolver for the lookupWorkspace field.
func (r *queryResolver) LookupWorkspace(ctx context.Context, workspaceID string) (*model.CompleteWorkspace, error) {
	panic(fmt.Errorf("not implemented: LookupWorkspace - lookupWorkspace"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
